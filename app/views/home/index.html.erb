<!DOCTYPE html>
<html>
<head>
<script type="text/javascript"></script>
<script type="text/javascript"></script>
</head>


<body>
Width: <input type="text" name="width" id="width">
Height: <input type="text" name="height" id="height">
Caption: <input type="text" name="Caption" id="caption">

<select id='color'>
  <option value="Red">Hall</option>
  <option value="Blue">Bedroom</option>
  <option value="Green">Kitchen</option>
</select>

<button type="button" id="addrect" >Rectangle</button>
<button type="button" id="delete" >Delete</button>
<button type="button" id="save" >Save</button>
<button type="button" id="drawPolygon" >Draw Polygon</button>
<canvas id="c" width="602" height="602" style="border:1px solid #aaa">
<img src="/assets/grid.png" id="grid">

</canvas><br>
Identity: <input type="text" name="width" id="identity">
<button type="button" id="fetch" >Fetch</button>
<canvas id="d" width="602" height="602" style="border:1px solid #aaa"></canvas><br>
<%= javascript_include_tag('fabric') %>


<script id="main" type="text/javascript">
  var canvas = new fabric.Canvas('c');
  var rect = new fabric.Rect({
    width: 200, height: 100, left: 100, top: 100, angle: 0,
    fill: 'rgba(255,0,0,0.2)'
  });

  var imgElement = document.getElementById('grid');
  var imgInstance = new fabric.Image(imgElement, {
    left: 300,
    top: 300,
    angle: 0,
    opacity: 0.5,
    selectable: false
  });
  canvas.add(imgInstance);

  //canvas.add(rect);
  canvas.on({
    'object:moving': onChange,
    'object:scaling': onChange,
    'object:rotating': onChange,
  });

  var rect_array=new Array();
  var i=0;       //accounts for number of entities

  $('#addrect').click(function(){
    width  = Number(document.getElementById('width').value);
    height = Number(document.getElementById('height').value);
    caption = String(document.getElementById('caption').value);
    color  = document.getElementById('color').value
    var rectangle = new fabric.Rect({
                     width: width, height: height, left: 300, top: 200, angle: 0,
                     fill: color, caption: caption
                    });
    i++;
    canvas.add(rectangle);
  })

  var drawflag=0;   
  var orthogonalityFlag=0;
  var n;
  var path_string = new Array();
  $('#drawPolygon').click(function(){
    drawflag=1;
    if(drawflag){
      n=0;
      i++;
      path_string = new Array();
      console.log(path_string);
    }
  })

  $(document).bind('mousedown',function(e){
    if(e.button==2){
      if(drawflag){
        if(orthogonalityFlag){
          path_string[n-1][1]=path_string[0][1];
          cLength = canvas._objects.length;
          var tempCircle = canvas._objects[cLength-1];
          console.log(canvas._objects[cLength-1]);
          tempCircle.setCoords({left: path_string[0][1]});
        }
        drawflag=0;
        canvas.forEachObject(function(o){ 
          if(o.type=='line'){
            canvas.remove(o);
          }
          canvas.remove(dynamicCircle);
          canvas.renderAll;
        });

        path_string[n]=["z"];
        string = pathToString(path_string);
        var poly_path = new fabric.Path(string);
        poly_path.set({ fill: 'red', opacity: 0.5,selectable: false,stroke: 'red', strokeWidth: 2});
        console.log(string);
        poly_path.id=i;
        canvas.add(poly_path);
      }
    }
  })

  var presentX;
  var presentY;
  var lastX;
  var lastY;
  canvas.on('mouse:down', function(options) {
    if(drawflag){
      presentX=options.e.layerX;
      presentY=options.e.layerY;
      if(n==0){
          path_string[n]=["M",options.e.layerX,options.e.layerY];
      }
      else{
          lastX=path_string[n-1][1];
          lastY=path_string[n-1][2];
          if(orthogonalityFlag){
            var distX= (presentX-lastX)*(presentX-lastX);
            var distY= (presentY-lastY)*(presentY-lastY);
            if(distX>distY)
              presentY=lastY;
            else
              presentX=lastX;

          }
          path_string[n]=["L",presentX,presentY];
          var line = new fabric.Line(
              [ lastX,
                lastY,
                presentX,
                presentY],
              {fill: 'red',
              stroke: 'red',
              strokeWidth: 1,
              opacity:0.8,
              selectable: false, 
              polyId:i,
              lineId: n,
              cornerSize: 0,
              lockScalingX: true,
              lockScalingY: true,
              lockUniScaling: true,
              borderScaleFactor:5,
              hasRotatingPoint: false
          });
          canvas.add(line);
      }

      var circle = new fabric.Circle({
        radius: 5,
        fill: 'red',
        left: presentX,
        top: presentY,
        polyId:i,
        circleId: n,
        cornerSize: 0,
        lockScalingX: true,
        lockScalingY: true,
        lockUniScaling: true,
        borderScaleFactor:80,
        hasRotatingPoint: false
      });
      circle.setCoords();
      canvas.add(circle);
      console.log(n);
      n++;
    };
  });

  var dynamicLine = new fabric.Line(
              [ 0,
                0,
                1,
                1],
              {fill: 'orange',
              stroke: 'orange',
              strokeWidth: 0.5,
              opacity:0.3,
              selectable: false, 
              cornerSize: 0,
              lockScalingX: true,
              lockScalingY: true,
              lockUniScaling: true,
              borderScaleFactor:5,
              hasRotatingPoint: false
          });
  var dynamicCircle = new fabric.Circle({
              radius: 5,
              fill: 'orange',
              left: 0,
              top:  0,
              opacity: 0.01,
              cornerSize: 0,
              lockScalingX: true,
              lockScalingY: true,
              lockUniScaling: true,
              borderScaleFactor:5,
              hasRotatingPoint: false
      });;

  canvas.on('mouse:move', function(options) {
    //console.log(options.e.layerX);
    e=options.e;
    if(drawflag&&(n>0)){
      X1=presentX;
      Y1=presentY;
      X2=e.layerX;
      Y2=e.layerY;

      if(orthogonalityFlag){
            var distX= (X2-X1)*(X2-X1);
            var distY= (Y2-Y1)*(Y2-Y1);
            if(distX>distY)
              Y2=Y1;
            else
              X2=X1;
          }

      var m = canvas._objects.length;

      //presentX contains X coordinates of last circle
      dynamicLine.set({ x1: X1, y1: Y1, x2: X2, y2: Y2});
      dynamicCircle.set({left: X2, top: Y2});
      canvas.add(dynamicLine);
      canvas.add(dynamicCircle);
      canvas.renderAll();

    }
  })
  
  canvas.on('object:moving', function(e) {
    var activeObject = e.target;
    circleId=activeObject.circleId;
    polyId= activeObject.polyId;
    canvas.forEachObject(function(o){ 
      if(o.id==polyId)
        {Polygon=o;
         Polygon.path[circleId][1]=activeObject.left;
         Polygon.path[circleId][2]=activeObject.top;
         Polygon.opacity=0.1;
        }

       if((o.polyId==polyId)&&(o.lineId==circleId))
       {
        o.x2=activeObject.left;
        o.y2=activeObject.top;
       }      
       canvas.renderAll;
    });
  });






  canvas.on('object:over', function(e) {
    var activeObject = e.target;
    activeObject.fill='blue';
    canvas.renderAll();
  });





  var Polygon;
  canvas.on('mouse:up', function(options) {
      if(Polygon)
        {Polygon.opacity=0.5;
        console.log("mouseup");
        canvas.renderAll();}
  })




  $(document).bind('keydown',function(e){
    console.log(e.keyCode);
    if(e.keyCode==16){
      orthogonalityFlag=1;
      console.log("Orthogonality: ", orthogonalityFlag);
    }
  })

  $(document).bind('keyup',function(e){
    console.log(e.keyCode);
    if(e.keyCode==16){
      orthogonalityFlag=0;
      console.log("Orthogonality: ", orthogonalityFlag);
    }

    if(e.keyCode==79){
      if(a=canvas.getActiveObject()){
        polyId=a.polyId;
        canvas.forEachObject(function(o){ 
        if((o.id==polyId)&&(o.circleId))
          {Polygon=o;
           Polygon.path[circleId][1]=activeObject.left;
           Polygon.path[circleId][2]=activeObject.top;
           Polygon.opacity=0.1;
           return;
        }        
      }
    }
  })


  //deletes selected group or object
  $('#delete').click(function(){
    if(canvas.getActiveGroup()){
        canvas.getActiveGroup().forEachObject(function(o){ canvas.remove(o) });
        canvas.discardActiveGroup().renderAll();
      } else {
        canvas.remove(canvas.getActiveObject());
      }
  })




  function pathToString(path){ 
    var str = "";
    pathLength=path.length
    for (var i=0;i<pathLength;i++)
      { 
        entityLength=path[i].length;
        for (var j=0;j<entityLength;j++)
            { 
              str = str.concat(path[i][j]," ");
            }
      }
      return str;
  }




  function onChange(options) {
    options.target.setCoords();
    canvas.forEachObject(function(obj) {
      if (obj === options.target) return;
      obj.setOpacity(options.target.intersectsWithObject(obj) ? 0.5 : 1);
    });
  }

  // var bw = 600;
  // var bh = 600;
  // var p = 0;
  // var cw = bw + (p*2) + 1;
  // var ch = bh + (p*2) + 1;

  // var context = canvas.getContext("2d");
  // function drawBoard(){
  // for (var x = 0; x <= bw; x += 50) {
  //     context.moveTo(0.5 + x + p, p);
  //     context.lineTo(0.5 + x + p, bh + p);
  // }


  // for (var x = 0; x <= bh; x += 50) {
  //     context.moveTo(p, 0.5 + x + p);
  //     context.lineTo(bw + p, 0.5 + x + p);
  // }

  // context.strokeStyle = "black";
  // context.stroke();
  // }

  // drawBoard();





  //Saves current canvas figure into server's database in json format
  $('#save').click(function(){
    var drawingjson = JSON.stringify(canvas.toObject(["caption","polyId", "circleId"]))
    //var drawingjson = JSON.stringify(canvas); 
    // alert(drawingjson);
    $.ajax({
          url: "/home/save",
          dataType: "json",
          data: {json : drawingjson},
          method: "POST"
      });
    //$.post("/home/save", drawingjson);
  })


  //for fetching and displaying database's exixting figure
  var canvas2 = new fabric.Canvas('d');
  //var ctx=canvas2.getContext("2d");

  $('#fetch').click(function(){
    identity  = Number(document.getElementById('identity').value);
    canvas2.clear();
    $.ajax({
          url: "/home/fetch.json",
          dataType: "json",
          data: {id : identity},
          method: "GET",
          success: function(data) {
          //console.log(data);
          canvas2.loadFromJSON(data);}
      });
    
  })


  $(document).ready(
    function(){

    }
  );



</script>

</body>
</html>
